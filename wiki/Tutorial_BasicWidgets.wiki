#summary Tutorial about basic widgets and their descriptions.

= Widget Introduction =

_Widget_ is the main concept in ui's.
This object inherits from [http://www.sfml-dev.org/documentation/1.5/classsf_1_1Drawable.htm sf::Drawable](in the graphical module), so it can be drawed by a [http://www.sfml-dev.org/documentation/1.5/classsf_1_1RenderTarget.htm sf::RenderTarget] instance (especially from an [http://www.sfml-dev.org/documentation/1.5/classsf_1_1RenderWindow.htm sf::RenderWindow] in normal use)
It has a position, a size, a default color for its background and is drawed as a filled-rectangle. It can also have widget childrens (like containers).

== The hierarchy in SFUI ==

The root class is not a widget but a GUI frontend ([http://code.google.com/p/sfui/source/browse/trunk/include/GuiRenderer.hpp sf::ui::GuiRenderer]).
To add new widgets on the screen, this class offers a global widget named "TopWidget" (reachable by Gui::GetTopWidget()). It is initialized as the screen size, but can be resized.

The gui renderer also use its own [http://www.sfml-dev.org/documentation/1.5/classsf_1_1View.htm sf::View].

== An example of application ? ==

_main.cpp_
{{{
#include <SFML/Graphics.hpp>

#include "GuiRenderer.hpp"
#include "Widget.hpp"

using namespace sf;

int main(int ac, char *av[])
{
    RenderWindow myApp(sf::VideoMode(200, 200), "SFML Gui");
    ui::GuiRenderer myGui(myApp); // the gui frontend has a RenderWindow reference.

    // We create a new widget
    ui::Widget myWidget;
    myWidget.SetColor(Color(255, 0, 0));

    myGui.GetTopWidget().Add(&myWidget); // we add our widget to the top container.

    while (App.IsOpened())
    {
        Event event;

        while (App.GetEvent(event))
        {
            if (event.Type == sf::Event::Closed)
                App.Close();

            myGui.InjectEvent(event); // the frontend process and propagate events to the widget hierarchy
        }

        App.Clear();

        myGui.Display(); // the renderer use its View for drawing.

        App.Display();
    }
}
}}}

[http://lokk.u7n.org/sfui/sfui_basics1.png]

= Other widgets =

There are useful widgets for games applications, with built-in templates.

== [http://code.google.com/p/sfui/source/browse/trunk/include/Label.hpp Label] ==

This object is one of the most used widgets.
It's just an implementation of an sf::String with widget working, but can also have a background color.

{{{
...
ui::Label myLbl("that's a test");
myLbl.SetX(25);
myLbl.SetTextSize(23.f);

myGui.GetTopWidget().Add(&myLbl);
...
}}}

[http://lokk.u7n.org/sfui/sfui_basics2.png]

== [http://code.google.com/p/sfui/source/browse/trunk/include/Window.hpp Window] ==

This widget inherits from [http://code.google.com/p/sfui/source/browse/trunk/include/MovableWidget.hpp sf::ui::MovableWidget], so it can be moved to screen.

{{{
...
ui::Window myWin("My Window");
myWin.SetColor(Color(255, 123, 223));
myWin.SetSize(100, 100);
myWin.SetAlignment(ui::Align::CENTER);

myGui.GetTopWidget().Add(&myWin);
...
}}}

[http://lokk.u7n.org/sfui/sfui_basics3.png]

== [http://code.google.com/p/sfui/source/browse/trunk/include/TextInput.hpp TextInput] ==

This widget is a common text input line with mouse selection feature.

{{{
...
ui::TextInput myInput("enter your name...");
myInput.SetWidth(140);
myInput.SetAlignment(ui::Align::CENTER);
myInput.SetColor(Color(123, 123, 123));

myInput.SetSelection(0, 3);
myInput.SetSelectionColor(Color(255, 255, 255, 123));

myGui.SetFocusedWiget(&myInput);
myGui.GetTopWidget().Add(&myInput);
...
}}}

[http://lokk.u7n.org/sfui/sfui_basics4.png]

== [http://code.google.com/p/sfui/source/browse/trunk/include/TextButton.hpp TextButton] ==

This widget is a common button, with built-in style.
For making another button styles, you should read the tutorials about templating.

{{{
...
ui::TextButton myBtn("Button");
myBtn.SetAlignment(ui::Align::CENTER);

myGui.GetTopWidget().Add(&myBtn);
...
}}}

[http://lokk.u7n.org/sfui/sfui_basics5.png]